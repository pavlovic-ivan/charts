name: Push

on:
  # When this workflow is invoked by another repo
  workflow_dispatch:
    inputs:
      owner:
        required: true
        type: string
      repo:
        required: true
        type: string
      ref:
        required: true
        type: string

jobs:
  push:
    runs-on: ubuntu-latest
    steps:
      - name: Init input variables
        id: inputs
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            owner="${{ github.event.inputs.owner }}"
            repo="${{ github.event.inputs.repo }}"
            ref="${{ github.event.inputs.ref }}"
          else
            owner="${{ github.event.repository.owner.login }}"
            repo="${{ github.event.repository.name }}"
            ref="${{ github.ref }}"
          fi
          echo "::set-output name=owner::$owner"
          echo "::set-output name=repo::$repo"
          echo "::set-output name=ref::$ref"
      - name: Checkout self
        uses: actions/checkout@v3
        with:
          path: self
      - name: Lookup and validate repo config
        id: config
        uses: actions/github-script@v6
        env:
          INPUTS_JSON: ${{ toJson(steps.inputs.outputs) }}
        with:
          script: |
            const config = require('./self/.github/workflows/push/config.json')
            const { owner, repo, ref } = JSON.parse(process.env.INPUTS_JSON)
            const source = config.sources.find(source => {
              return source.owner === owner && source.repo == repo
            })
            if (source === undefined) {
              return core.setFailed(`Config not found for source ${owner}/${repo}`)
            }
            const found = source.refs.some(r => {
              if (r.type === 'regex') {
                const regex = new RegExp(r.ref)
                return regex.test(ref)
              }
              return r.ref === ref
            })
            if (!found) {
              return core.setFailed(`Ref ${ref} is not allowed for source ${owner}/${repo}`)
            }
            return source.charts
      - name: Checkout gh-pages
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages
      - name: Checkout ${{ steps.inputs.outputs.owner }}/${{ steps.inputs.outputs.repo }}
        uses: actions/checkout@v3
        with:
          repository: ${{ steps.inputs.outputs.owner }}/${{ steps.inputs.outputs.repo }}
          ref: ${{ steps.inputs.outputs.ref }}
          path: source
      - name: Package charts
        env:
          CHARTS_JSON: ${{ steps.config.outputs.result }}
          REF: ${{ steps.inputs.outputs.ref }}
        # await exec.exec('helm', ['package', '--sign', '--key', 'gross', '--keyring', 'secring.gpg', source, '-d', `gh-pages/${chart.destination}`])
        # helm package --sign --key gross --keyring secring.gpg 
        run: |
          cat <(echo -e "${{ secrets.GPG_SECRING }}") | gpg --batch --import
          gpg --list-keys
          helm package --sign --key gross --keyring secring.gpg source/deployment/helm-k8s -d gh-pages/siembol
      # - name: Update index
      #   working-directory: gh-pages
      #   run: |
      #     helm repo index .
      #     git add index.yaml
      # # TODO install @octokit/app and use it within github-script instead of relying on Step
      # - name: Install Step CLI
      #   env: 
      #     VERSION: 0.18.2
      #   run: |
      #     curl -sLO https://github.com/smallstep/cli/releases/download/v${VERSION}/step-cli_${VERSION}_amd64.deb
      #     sudo dpkg -i step-cli_${VERSION}_amd64.deb
      #     rm step-cli_${VERSION}_amd64.deb
      # - name: Create access token
      #   id: token
      #   env:
      #     APP_ID: ${{ secrets.APP_ID }}
      #     APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
      #   run: |
      #     jwt=$(step crypto jwt sign --key /dev/fd/3 --issuer $APP_ID --expiration $(date -d +5min +%s) --subtle 3<<< $APP_PRIVATE_KEY)
      #     installation_id=$(curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer $jwt" https://api.github.com/app/installations | jq '.[] | select(.account.login == "${{ github.repository_owner }}") | .id')
      #     token=$(curl -s -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer $jwt" https://api.github.com/app/installations/$installation_id/access_tokens | jq -r '.token')
      #     echo "::add-mask::$token"
      #     echo "::set-output name=token::$token"
      # - name: Commit and push changes
      #   working-directory: gh-pages
      #   run: |
      #     token=$(echo -n "x-access-token:${{ steps.token.outputs.token}}" | base64)
      #     git config --local --unset-all http.https://github.com/.extraheader
      #     git config --local http.https://github.com/.extraheader "AUTHORIZATION: basic $token"
      #     git config --local user.name "Ivan's charts"
      #     git config --local user.email charts@demo.io
      #     git commit -m "Publish helm chart ${{ steps.inputs.outputs.owner }}/${{ steps.inputs.outputs.repo }}@${{ steps.inputs.outputs.ref }}"
      #     git push