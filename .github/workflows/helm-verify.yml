name: Verify Helm Chart

on:
  workflow_call:
    secrets:
      GPG_PUBKEY:
        description: 'The GnuPG public key used to verify Helm Charts'
        required: true
    inputs:
      CHART:
        description: 'Full name of the Helm chart to verify'
        required: true

jobs:
  helm-verify:
    runs-on: ubuntu-latest
    steps:
      - name: Import GPG key
        run: |
          trap "rm -f pubkey.gpg" EXIT
          cat > pubkey.gpg << EOF
          ${{ secrets.GPG_PUBKEY }}
          EOF
          gpg --batch --import pubkey.gpg
          gpg --export >~/.gnupg/pubring.gpg
      - name: Checkout gh-pages
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages
      - name: Lookup and validate repo config
        id: config
        uses: actions/github-script@v6
        env:
          CHART_NAME: ${{ inputs.CHART }}
        with:
          script: |
            const config = require('./self/.github/workflows/push/config.json')
            const { owner, repo, ref } = JSON.parse(process.env.INPUTS_JSON)
            const source = config.sources.find(source => {
              return source.owner === owner && source.repo == repo
            })
            if (source === undefined) {
              return core.setFailed(`Config not found for source ${owner}/${repo}`)
            }
            const found = source.refs.some(r => {
              if (r.type === 'regex') {
                const regex = new RegExp(r.ref)
                return regex.test(ref)
              }
              return r.ref === ref
            })
            if (!found) {
              return core.setFailed(`Ref ${ref} is not allowed for source ${owner}/${repo}`)
            }
            const fs = require('fs')
            const file_found = false
            const chart_path = ''
            for (const chart of charts) {
              try {
                if (fs.existsSync(`${chart.destination}/${process.env.CHART_NAME}`)) {
                  chart_path = `${chart.destination}/${process.env.CHART_NAME}`
                  file_found = true
                  break
                }
              } catch(err) {
                console.error(err)
                continue
              }
            }
            return chart_path
      - name: Verify helm chart
        run: helm verify ${{ steps.config.outputs.result }}